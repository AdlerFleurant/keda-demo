## Stage 1 : build with maven builder image with native capabilities
FROM quay.io/quarkus/ubi-quarkus-graalvmce-builder-image:22.3-java17 AS build
ARG PROJECT
COPY --chown=quarkus:quarkus mvnw /code/mvnw
COPY --chown=quarkus:quarkus .mvn /code/.mvn
COPY --chown=quarkus:quarkus pom.xml /code/
USER quarkus
WORKDIR /code
COPY --chown=quarkus:quarkus model /code/model
COPY --chown=quarkus:quarkus processor /code/processor
COPY --chown=quarkus:quarkus processor-cl /code/processor-cl
COPY --chown=quarkus:quarkus producer /code/producer
COPY --chown=quarkus:quarkus producer-cl /code/producer-cl
COPY --chown=quarkus:quarkus request-processor-service /code/request-processor-service
COPY --chown=quarkus:quarkus request-supplier-service /code/request-supplier-service
RUN ./mvnw -B org.apache.maven.plugins:maven-dependency-plugin:3.1.2:go-offline --projects $PROJECT --also-make
RUN ./mvnw package -Pnative --projects $PROJECT --also-make

## Stage 2 : create the docker final image
FROM quay.io/quarkus/quarkus-micro-image:2.0
ARG PROJECT
WORKDIR /work/
COPY --from=build /code/$PROJECT/target/*-runner /work/application

# set up permissions for user `1001`
RUN chmod 775 /work /work/application \
  && chown -R 1001 /work \
  && chmod -R "g+rwX" /work \
  && chown -R 1001:root /work

EXPOSE 8080
USER 1001

CMD ["./application", "-Dquarkus.http.host=0.0.0.0"]